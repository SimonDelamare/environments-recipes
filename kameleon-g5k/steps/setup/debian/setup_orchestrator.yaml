# Install and configure (if required) puppet
# This is not made by the standard packet installation mechanisme
# because we want to add a specific version


- script_url: https://raw.githubusercontent.com/pmorillon/puppet-puppet/master/extras/bootstrap/puppet_install.sh
- script_name: puppet_install.sh
- script_path: /tmp
- puppet_version: 3.7.3

- get_standalone_puppet_script:
  - exec_local: mkdir -p $$kameleon_cwd/script_dir
  - exec_local: wget $$script_url --no-check-certificate -P $$kameleon_cwd/script_dir
  - pipe:
    - exec_local: tar -cf - -C $$kameleon_cwd/script_dir .
    - exec_in: tar xfp - -C $$script_path
  - exec_in: chmod +x $$script_path/$$script_name
  - exec_in: sed -e "/(cd \/tmp &&/i \ \ if [[ \$DISTRIB_CODENAME = 'jessie' ]]\n  then\n    DISTRIB_CODENAME=wheezy\n  fi" -i $$script_path/$$script_name
  - exec_in: sed -e "s/confold install puppet/confold install --no-install-recommends puppet/" -i $$script_path/$$script_name
  - exec_in: PUPPET_VERSION=$$puppet_version $$script_path/$$script_name
  # We tagged packet as "automatically installed" to auto-remove them at the end of the orchestration step
  # ruby-json is a bugfix. Even if it is a puppet dependency, apt mark it as "manually installed" for some unknown reason. As we don't want to keep it, we mark it as auto-installed.
  # libaugeas-ruby: same than above
  - exec_in: apt-mark auto puppet puppet-common lsb-release puppetlabs-release ruby-json libaugeas-ruby
  - on_setup_clean:
    - exec_in: apt-get --yes autoremove --purge
    - exec_local: rm -r $$kameleon_cwd/script_dir



## Need btrfs filesystem

# - rootfs_snapshot: /opt/puppet/rootfs_snapshot
#
# - check_packages_state:
#   - exec_in: false
#
# - create_rootfs_snapshot:
#   - check_cmd_in: btrfs
#   - exec_in: mkdir -p $(dirname $$rootfs_snapshot)
#   - exec_in: btrfs subvolume snapshot / $$rootfs_snapshot
#   - on_setup_clean:
#     - exec_in: btrfs subvolume delete $$rootfs_snapshot
#     - exec_in: rm $(dirname $$rootfs_snapshot)/bin/puppet
#     - exec_in: rmdir $(dirname $$rootfs_snapshot)
#
# - install_puppet:
#   # Deactivate the check to make the cache system works after a while...
#   - exec_in: chroot $$rootfs_snapshot apt-get -o Acquire::Check-Valid-Until=false -y --force-yes update 2>&1
#   - exec_in: chroot $$rootfs_snapshot apt-get -y --force-yes install puppet 2>&1
#
# - create_puppet_wrapper:
#   - write_in:
#     - $(dirname $$rootfs_snapshot)/bin/puppet
#     - |
#       #!/bin/bash
#       ROOTFS=$$rootfs_snapshot
#       export LD_LIBRARY_PATH="\$(chroot \$ROOTFS ldconfig -v 2>&1 | grep : | grep -v '.real' | sed "s|^|\$ROOTFS|g" | paste -s -d '')"
#       export PATH="\$ROOTFS/usr/bin:\$ROOTFS/bin:\$PATH"
#       export GEM_PATH="\$(chroot \$ROOTFS gem env gempath | tr ':' '\n' | sed "s|^|\$ROOTFS|g" | paste -s -d '')"
#       export GEM_HOME="\$(chroot \$ROOTFS gem env gemhome)"
#       export RUBYLIB="\$(chroot \$ROOTFS ruby -e 'puts $:' | sed "s|^|\$ROOTFS|g" | paste -s -d ':')"
#
#       RUBY_EXECUTABLE=\${ROOTFS}/usr/bin/ruby
#       PUPPET_LAUNCHER=\${ROOTFS}/usr/bin/puppet
#
#       # Call the actual Puppet bin with our arguments
#       "\${RUBY_EXECUTABLE}" "\${PUPPET_LAUNCHER}" "\$@"
#   - exec_in: chmod +x /opt/puppet/bin/puppet
#   - exec_in: false
